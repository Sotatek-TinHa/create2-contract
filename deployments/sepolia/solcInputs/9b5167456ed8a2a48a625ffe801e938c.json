{
  "language": "Solidity",
  "sources": {
    "contracts/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n//Using Create2 to find out the contract address before its deployment.\ncontract DeployWithCreate2 {\n    address public owner;\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n}\n\ncontract Create2Factory {\n    event Deploy(address addr);\n\n    // to deploy another contract using owner address and salt specified\n    function deploy(uint _salt) external {\n        DeployWithCreate2 _contract = new DeployWithCreate2{ salt: bytes32(_salt) }(msg.sender);\n\n        emit Deploy(address(_contract));\n    }\n\n    // get the computed address before the contract DeployWithCreate2 deployed\n    // using Bytecode of contract DeployWithCreate2 and salt specified by the sender\n    function getAddress(bytes memory bytecode, uint _salt) public view returns (address) {\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode)));\n\n        return address(uint160(uint(hash)));\n    }\n\n    // get the ByteCode of the contract DeployWithCreate2\n    function getBytecode(address _owner) public pure returns (bytes memory) {\n        bytes memory bytecode = type(DeployWithCreate2).creationCode;\n\n        return abi.encodePacked(bytecode, abi.encode(_owner));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}